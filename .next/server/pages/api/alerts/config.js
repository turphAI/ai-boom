"use strict";(()=>{var a={};a.id=707,a.ids=[707],a.modules={788:a=>{a.exports=import("drizzle-orm/mysql-core")},1737:a=>{a.exports=import("drizzle-orm")},2067:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.d(b,{N:()=>m});var e=c(6382),f=c.n(e),g=c(4729),h=c.n(g),i=c(3097),j=c(7208),k=c(1737),l=a([i,j,k]);[i,j,k]=l.then?(await l)():l;let m={providers:[f()({name:"credentials",credentials:{email:{label:"Email",type:"email"},password:{label:"Password",type:"password"}},async authorize(a){if(!a?.email||!a?.password)return null;try{let b=await i.db.select().from(j.users).where((0,k.eq)(j.users.email,a.email)).limit(1);if(!b.length||!await h().compare(a.password,b[0].passwordHash))return null;return{id:b[0].id.toString(),email:b[0].email,name:b[0].name}}catch(a){return console.error("Auth error:",a),null}}})],session:{strategy:"jwt"},jwt:{secret:process.env.NEXTAUTH_SECRET},callbacks:{jwt:async({token:a,user:b})=>(b&&(a.id=b.id),a),session:async({session:a,token:b})=>(b&&(a.user.id=b.id),a)}};d()}catch(a){d(a)}})},2971:a=>{a.exports=import("zod")},3097:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.d(b,{db:()=>j});var e=c(4905),f=c(8091),g=c(7208),h=a([e,f,g]);[e,f,g]=h.then?(await h)():h;let i=new e.Client({url:process.env.DATABASE_URL}),j=(0,f.drizzle)(i,{schema:g});d()}catch(a){d(a)}})},3571:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.r(b),c.d(b,{config:()=>o,default:()=>n,handler:()=>m});var e=c(9046),f=c(8667),g=c(3480),h=c(6435),i=c(8138),j=c(8112),k=c(8766),l=a([i]);i=(l.then?(await l)():l)[0];let n=(0,h.M)(i,"default"),o=(0,h.M)(i,"config"),p=new g.PagesAPIRouteModule({definition:{kind:f.A.PAGES_API,page:"/api/alerts/config",pathname:"/api/alerts/config",bundlePath:"",filename:""},userland:i,distDir:".next",projectDir:""});async function m(a,b,c){let d=await p.prepare(a,b,{srcPage:"/api/alerts/config"});if(!d){b.statusCode=400,b.end("Bad Request"),null==c.waitUntil||c.waitUntil.call(c,Promise.resolve());return}let{query:f,params:g,prerenderManifest:h}=d;try{let c=a.method||"GET",d=(0,j.getTracer)(),e=d.getActiveScopeSpan(),i=p.instrumentationOnRequestError.bind(p),l=async e=>p.render(a,b,{query:{...f,...g},params:g,allowedRevalidateHeaderKeys:void 0,multiZoneDraftMode:!0,trustHostHeader:void 0,previewProps:h.preview,propagateError:!1,dev:p.isDev,page:"/api/alerts/config",projectDir:"",onError:(...b)=>i(a,...b)}).finally(()=>{if(!e)return;e.setAttributes({"http.status_code":b.statusCode,"next.rsc":!1});let f=d.getRootSpanAttributes();if(!f)return;if(f.get("next.span_type")!==k.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${f.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let g=f.get("next.route");if(g){let a=`${c} ${g}`;e.setAttributes({"next.route":g,"http.route":g,"next.span_name":a}),e.updateName(a)}else e.updateName(`${c} ${a.url}`)});e?await l(e):await d.withPropagatedContext(a.headers,()=>d.trace(k.BaseServerSpan.handleRequest,{spanName:`${c} ${a.url}`,kind:j.SpanKind.SERVER,attributes:{"http.method":c,"http.target":a.url}},l))}catch(a){if(p.isDev)throw a;(0,e.sendError)(b,500,"Internal Server Error")}finally{null==c.waitUntil||c.waitUntil.call(c,Promise.resolve())}}d()}catch(a){d(a)}})},4729:a=>{a.exports=require("bcryptjs")},4905:a=>{a.exports=import("@planetscale/database")},5542:a=>{a.exports=require("next-auth")},5600:a=>{a.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6382:a=>{a.exports=require("next-auth/providers/credentials")},7208:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.r(b),c.d(b,{alertConfigurations:()=>h,userPreferences:()=>i,users:()=>g});var e=c(788),f=a([e]);e=(f.then?(await f)():f)[0];let g=(0,e.mysqlTable)("users",{id:(0,e.int)("id").primaryKey().autoincrement(),email:(0,e.varchar)("email",{length:255}).notNull().unique(),passwordHash:(0,e.varchar)("password_hash",{length:255}).notNull(),name:(0,e.varchar)("name",{length:50}).notNull(),role:(0,e.mysqlEnum)("role",["user","admin","editor","moderator"]).default("user"),preferences:(0,e.json)("preferences"),notifications:(0,e.json)("notifications"),profile:(0,e.json)("profile"),resetPasswordToken:(0,e.varchar)("reset_password_token",{length:255}),resetPasswordExpire:(0,e.datetime)("reset_password_expire"),emailVerificationToken:(0,e.varchar)("email_verification_token",{length:255}),emailVerified:(0,e.boolean)("email_verified").default(!1),lastLogin:(0,e.datetime)("last_login").default(new Date),active:(0,e.boolean)("active").default(!0),accountDeletionScheduled:(0,e.datetime)("account_deletion_scheduled"),accountDeleted:(0,e.boolean)("account_deleted").default(!1),accountDeletedAt:(0,e.datetime)("account_deleted_at"),dataRetention:(0,e.json)("data_retention"),privacySettings:(0,e.json)("privacy_settings"),consents:(0,e.json)("consents"),createdAt:(0,e.timestamp)("created_at").defaultNow(),updatedAt:(0,e.timestamp)("updated_at").defaultNow().onUpdateNow()}),h=(0,e.mysqlTable)("alert_configurations",{id:(0,e.varchar)("id",{length:255}).primaryKey(),userId:(0,e.varchar)("user_id",{length:255}).notNull(),dataSource:(0,e.varchar)("data_source",{length:255}).notNull(),metricName:(0,e.varchar)("metric_name",{length:255}).notNull(),thresholdType:(0,e.varchar)("threshold_type",{length:50}).notNull(),thresholdValue:(0,e.varchar)("threshold_value",{length:50}).notNull(),comparisonPeriod:(0,e.int)("comparison_period").notNull(),enabled:(0,e.boolean)("enabled").default(!0),notificationChannels:(0,e.text)("notification_channels"),createdAt:(0,e.timestamp)("created_at").defaultNow(),updatedAt:(0,e.timestamp)("updated_at").defaultNow().onUpdateNow()}),i=(0,e.mysqlTable)("user_preferences",{id:(0,e.varchar)("id",{length:255}).primaryKey(),userId:(0,e.varchar)("user_id",{length:255}).notNull(),preferences:(0,e.text)("preferences"),createdAt:(0,e.timestamp)("created_at").defaultNow(),updatedAt:(0,e.timestamp)("updated_at").defaultNow().onUpdateNow()});d()}catch(a){d(a)}})},8091:a=>{a.exports=import("drizzle-orm/planetscale-serverless")},8138:(a,b,c)=>{c.a(a,async(a,d)=>{try{c.r(b),c.d(b,{default:()=>l});var e=c(5542),f=c(2067),g=c(3097),h=c(7208),i=c(1737),j=c(2971),k=a([f,g,h,i,j]);[f,g,h,i,j]=k.then?(await k)():k;let q=j.z.object({dataSource:j.z.string(),metricName:j.z.string(),thresholdType:j.z.enum(["absolute","percentage","standard_deviation"]),thresholdValue:j.z.number(),comparisonPeriod:j.z.number().min(1).max(365),enabled:j.z.boolean().default(!0),notificationChannels:j.z.array(j.z.string()).default(["email"])}),r=q.partial();async function l(a,b){try{let c=await (0,e.getServerSession)(a,b,f.N);if(!c)return b.status(401).json({error:"Unauthorized"});let d=c.user.id;switch(a.method){case"GET":return await m(a,b,d);case"POST":return await n(a,b,d);case"PUT":return await o(a,b,d);case"DELETE":return await p(a,b,d);default:return b.status(405).json({error:"Method not allowed"})}}catch(a){console.error("Alert config error:",a),b.status(500).json({error:"Internal server error"})}}async function m(a,b,c){let{dataSource:d,metricName:e}=a.query;try{let a=[(0,i.eq)(h.alertConfigurations.userId,c)];d&&"string"==typeof d&&a.push((0,i.eq)(h.alertConfigurations.dataSource,d)),e&&"string"==typeof e&&a.push((0,i.eq)(h.alertConfigurations.metricName,e));let f=(await g.db.select().from(h.alertConfigurations).where((0,i.and)(...a))).map(a=>{let b=["email"];if(a.notificationChannels)try{b=JSON.parse(a.notificationChannels)}catch(a){console.warn("Failed to parse notificationChannels:",a)}return{...a,channels:b}});b.status(200).json({configs:f})}catch(a){console.warn("Using mock alert configs for development:",a),b.status(200).json({configs:[{id:"1",metricName:"weekly_bond_issuance",dataSource:"bond_issuance",thresholdType:"percentage",thresholdValue:20,comparisonPeriod:7,enabled:!0,channels:["email","slack"]},{id:"2",metricName:"bdc_discount",dataSource:"bdc_discount",thresholdType:"absolute",thresholdValue:-15,comparisonPeriod:1,enabled:!0,channels:["email"]}]})}}async function n(a,b,c){try{let d=q.parse(a.body);if((await g.db.select().from(h.alertConfigurations).where((0,i.and)((0,i.eq)(h.alertConfigurations.userId,c),(0,i.eq)(h.alertConfigurations.dataSource,d.dataSource),(0,i.eq)(h.alertConfigurations.metricName,d.metricName))).limit(1)).length>0)return b.status(400).json({error:"Alert configuration already exists for this metric"});let e=crypto.randomUUID();await g.db.insert(h.alertConfigurations).values({id:e,userId:c,dataSource:d.dataSource,metricName:d.metricName,thresholdType:d.thresholdType,thresholdValue:d.thresholdValue.toString(),comparisonPeriod:d.comparisonPeriod,enabled:d.enabled,notificationChannels:d.notificationChannels?JSON.stringify(d.notificationChannels):null});let f=await g.db.select().from(h.alertConfigurations).where((0,i.eq)(h.alertConfigurations.id,e)).limit(1),j=["email"];if(f[0].notificationChannels)try{j=JSON.parse(f[0].notificationChannels)}catch(a){console.warn("Failed to parse notificationChannels:",a)}let k={...f[0],channels:j};b.status(201).json({config:k})}catch(e){console.warn("Database not available, using mock response:",e);let d={id:crypto.randomUUID(),...a.body,userId:c,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};b.status(201).json({config:d})}}async function o(a,b,c){let{id:d}=a.query;if(!d||"string"!=typeof d)return b.status(400).json({error:"Config ID is required"});try{let e=r.parse(a.body),f=await g.db.select().from(h.alertConfigurations).where((0,i.and)((0,i.eq)(h.alertConfigurations.id,d),(0,i.eq)(h.alertConfigurations.userId,c))).limit(1);if(0===f.length)return b.status(404).json({error:"Alert configuration not found"});let j={...e};void 0!==j.thresholdValue&&(j.thresholdValue=j.thresholdValue.toString()),void 0!==j.notificationChannels&&(j.notificationChannels=j.notificationChannels?JSON.stringify(j.notificationChannels):null),await g.db.update(h.alertConfigurations).set(j).where((0,i.eq)(h.alertConfigurations.id,d));let k=await g.db.select().from(h.alertConfigurations).where((0,i.eq)(h.alertConfigurations.id,d)).limit(1),l=["email"];if(k[0].notificationChannels)try{l=JSON.parse(k[0].notificationChannels)}catch(a){console.warn("Failed to parse notificationChannels:",a)}let m={...k[0],channels:l};b.status(200).json({config:m})}catch(f){console.warn("Database not available, using mock response:",f);let e={id:d,...a.body,userId:c,updatedAt:new Date().toISOString()};b.status(200).json({config:e})}}async function p(a,b,c){let{id:d}=a.query;if(!d||"string"!=typeof d)return b.status(400).json({error:"Config ID is required"});try{let a=await g.db.select().from(h.alertConfigurations).where((0,i.and)((0,i.eq)(h.alertConfigurations.id,d),(0,i.eq)(h.alertConfigurations.userId,c))).limit(1);if(0===a.length)return b.status(404).json({error:"Alert configuration not found"});await g.db.delete(h.alertConfigurations).where((0,i.eq)(h.alertConfigurations.id,d)),b.status(200).json({message:"Alert configuration deleted successfully"})}catch(a){console.warn("Database not available, using mock response:",a),b.status(200).json({message:"Alert configuration deleted successfully"})}}d()}catch(a){d(a)}})}};var b=require("../../../webpack-api-runtime.js");b.C(a);var c=b.X(0,[169],()=>b(b.s=3571));module.exports=c})();