"use strict";(()=>{var e={};e.id=346,e.ids=[346],e.modules={8432:e=>{e.exports=require("bcryptjs")},5890:e=>{e.exports=require("better-sqlite3")},3227:e=>{e.exports=require("next-auth")},7449:e=>{e.exports=require("next-auth/providers/credentials")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},3646:e=>{e.exports=import("@planetscale/database")},7612:e=>{e.exports=import("drizzle-orm")},7516:e=>{e.exports=import("drizzle-orm/better-sqlite3")},1351:e=>{e.exports=import("drizzle-orm/planetscale-serverless")},4720:e=>{e.exports=import("drizzle-orm/sqlite-core")},9926:e=>{e.exports=import("zod")},6249:(e,t)=>{Object.defineProperty(t,"l",{enumerable:!0,get:function(){return function e(t,a){return a in t?t[a]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,a)):"function"==typeof t&&"default"===a?t:void 0}}})},1984:(e,t,a)=>{a.a(e,async(e,r)=>{try{a.r(t),a.d(t,{config:()=>u,default:()=>d,routeModule:()=>c});var n=a(1802),i=a(7153),o=a(6249),s=a(4876),l=e([s]);s=(l.then?(await l)():l)[0];let d=(0,o.l)(s,"default"),u=(0,o.l)(s,"config"),c=new n.PagesAPIRouteModule({definition:{kind:i.x.PAGES_API,page:"/api/alerts/config",pathname:"/api/alerts/config",bundlePath:"",filename:""},userland:s});r()}catch(e){r(e)}})},3642:(e,t,a)=>{a.a(e,async(e,r)=>{try{a.d(t,{L:()=>f});var n=a(7449),i=a.n(n),o=a(8432),s=a.n(o),l=a(3239),d=a(1779),u=a(7612),c=e([l,d,u]);[l,d,u]=c.then?(await c)():c;let f={providers:[i()({name:"credentials",credentials:{email:{label:"Email",type:"email"},password:{label:"Password",type:"password"}},async authorize(e){if(!e?.email||!e?.password)return null;try{let t=await l.db.select().from(d.users).where((0,u.eq)(d.users.email,e.email)).limit(1);if(!t.length||!await s().compare(e.password,t[0].passwordHash))return null;return{id:t[0].id,email:t[0].email,name:t[0].name}}catch(e){return console.error("Auth error:",e),null}}})],session:{strategy:"jwt"},jwt:{secret:process.env.NEXTAUTH_SECRET},callbacks:{jwt:async({token:e,user:t})=>(t&&(e.id=t.id),e),session:async({session:e,token:t})=>(t&&(e.user.id=t.id),e)}};r()}catch(e){r(e)}})},3239:(e,t,a)=>{a.a(e,async(e,r)=>{try{let c;a.d(t,{db:()=>c});var n=a(3646),i=a(1351),o=a(5890),s=a.n(o),l=a(7516),d=a(1779),u=e([n,i,l,d]);if([n,i,l,d]=u.then?(await u)():u,process.env.VERCEL){let e=new(s())("./local.db");c=(0,l.drizzle)(e,{schema:d}),process.env.VERCEL&&e.exec(`
      CREATE TABLE IF NOT EXISTS users (
        id TEXT PRIMARY KEY,
        email TEXT UNIQUE NOT NULL,
        password_hash TEXT NOT NULL,
        name TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      );
      
      INSERT OR REPLACE INTO users (id, email, password_hash, name) 
      VALUES (
        'demo-user-id',
        'demo@example.com',
        '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', -- password: demo123
        'Demo User'
      );
    `)}else{let e=(0,n.connect)({host:process.env.DATABASE_HOST,username:process.env.DATABASE_USERNAME,password:process.env.DATABASE_PASSWORD});c=(0,i.drizzle)(e,{schema:d})}r()}catch(e){r(e)}})},1779:(e,t,a)=>{a.a(e,async(e,r)=>{try{a.r(t),a.d(t,{alertConfigurations:()=>s,userPreferences:()=>l,users:()=>o});var n=a(4720),i=e([n]);n=(i.then?(await i)():i)[0];let o=(0,n.sqliteTable)("users",{id:(0,n.text)("id").primaryKey(),email:(0,n.text)("email").notNull().unique(),passwordHash:(0,n.text)("password_hash").notNull(),name:(0,n.text)("name"),createdAt:(0,n.text)("created_at").default("CURRENT_TIMESTAMP"),updatedAt:(0,n.text)("updated_at").default("CURRENT_TIMESTAMP")}),s=(0,n.sqliteTable)("alert_configurations",{id:(0,n.text)("id").primaryKey(),userId:(0,n.text)("user_id").notNull(),dataSource:(0,n.text)("data_source").notNull(),metricName:(0,n.text)("metric_name").notNull(),thresholdType:(0,n.text)("threshold_type").notNull(),thresholdValue:(0,n.real)("threshold_value").notNull(),comparisonPeriod:(0,n.integer)("comparison_period").notNull(),enabled:(0,n.integer)("enabled").default(1),notificationChannels:(0,n.text)("notification_channels"),createdAt:(0,n.text)("created_at").default("CURRENT_TIMESTAMP"),updatedAt:(0,n.text)("updated_at").default("CURRENT_TIMESTAMP")}),l=(0,n.sqliteTable)("user_preferences",{id:(0,n.text)("id").primaryKey(),userId:(0,n.text)("user_id").notNull(),preferences:(0,n.text)("preferences"),createdAt:(0,n.text)("created_at").default("CURRENT_TIMESTAMP"),updatedAt:(0,n.text)("updated_at").default("CURRENT_TIMESTAMP")});r()}catch(e){r(e)}})},4876:(e,t,a)=>{a.a(e,async(e,r)=>{try{a.r(t),a.d(t,{default:()=>c});var n=a(3227),i=a(3642),o=a(3239),s=a(1779),l=a(7612),d=a(9926),u=e([i,o,s,l,d]);[i,o,s,l,d]=u.then?(await u)():u;let g=d.z.object({dataSource:d.z.string(),metricName:d.z.string(),thresholdType:d.z.enum(["absolute","percentage","standard_deviation"]),thresholdValue:d.z.number(),comparisonPeriod:d.z.number().min(1).max(365),enabled:d.z.boolean().default(!0),notificationChannels:d.z.array(d.z.string()).default(["email"])}),y=g.partial();async function c(e,t){try{let a=await (0,n.getServerSession)(e,t,i.L);if(!a)return t.status(401).json({error:"Unauthorized"});let r=a.user.id;switch(e.method){case"GET":return await f(e,t,r);case"POST":return await p(e,t,r);case"PUT":return await m(e,t,r);case"DELETE":return await h(e,t,r);default:return t.status(405).json({error:"Method not allowed"})}}catch(e){console.error("Alert config error:",e),t.status(500).json({error:"Internal server error"})}}async function f(e,t,a){let{dataSource:r,metricName:n}=e.query;try{let e=[(0,l.eq)(s.alertConfigurations.userId,a)];r&&"string"==typeof r&&e.push((0,l.eq)(s.alertConfigurations.dataSource,r)),n&&"string"==typeof n&&e.push((0,l.eq)(s.alertConfigurations.metricName,n));let i=(await o.db.select().from(s.alertConfigurations).where((0,l.and)(...e))).map(e=>{let t=["email"];if(e.notificationChannels)try{t=JSON.parse(e.notificationChannels)}catch(e){console.warn("Failed to parse notificationChannels:",e)}return{...e,channels:t}});t.status(200).json({configs:i})}catch(e){console.warn("Using mock alert configs for development:",e),t.status(200).json({configs:[{id:"1",metricName:"weekly_bond_issuance",dataSource:"bond_issuance",thresholdType:"percentage",thresholdValue:20,comparisonPeriod:7,enabled:!0,channels:["email","slack"]},{id:"2",metricName:"bdc_discount",dataSource:"bdc_discount",thresholdType:"absolute",thresholdValue:-15,comparisonPeriod:1,enabled:!0,channels:["email"]}]})}}async function p(e,t,a){try{let r=g.parse(e.body);if((await o.db.select().from(s.alertConfigurations).where((0,l.and)((0,l.eq)(s.alertConfigurations.userId,a),(0,l.eq)(s.alertConfigurations.dataSource,r.dataSource),(0,l.eq)(s.alertConfigurations.metricName,r.metricName))).limit(1)).length>0)return t.status(400).json({error:"Alert configuration already exists for this metric"});let n=crypto.randomUUID();await o.db.insert(s.alertConfigurations).values({id:n,userId:a,dataSource:r.dataSource,metricName:r.metricName,thresholdType:r.thresholdType,thresholdValue:r.thresholdValue.toString(),comparisonPeriod:r.comparisonPeriod,enabled:r.enabled,notificationChannels:JSON.stringify(r.notificationChannels)});let i=await o.db.select().from(s.alertConfigurations).where((0,l.eq)(s.alertConfigurations.id,n)).limit(1),d=["email"];if(i[0].notificationChannels)try{d=JSON.parse(i[0].notificationChannels)}catch(e){console.warn("Failed to parse notificationChannels:",e)}let u={...i[0],channels:d};t.status(201).json({config:u})}catch(n){console.warn("Database not available, using mock response:",n);let r={id:crypto.randomUUID(),...e.body,userId:a,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};t.status(201).json({config:r})}}async function m(e,t,a){let{id:r}=e.query;if(!r||"string"!=typeof r)return t.status(400).json({error:"Config ID is required"});try{let n=y.parse(e.body),i=await o.db.select().from(s.alertConfigurations).where((0,l.and)((0,l.eq)(s.alertConfigurations.id,r),(0,l.eq)(s.alertConfigurations.userId,a))).limit(1);if(0===i.length)return t.status(404).json({error:"Alert configuration not found"});let d={...n};void 0!==d.thresholdValue&&(d.thresholdValue=d.thresholdValue.toString()),void 0!==d.notificationChannels&&(d.notificationChannels=JSON.stringify(d.notificationChannels)),await o.db.update(s.alertConfigurations).set(d).where((0,l.eq)(s.alertConfigurations.id,r));let u=await o.db.select().from(s.alertConfigurations).where((0,l.eq)(s.alertConfigurations.id,r)).limit(1),c=["email"];if(u[0].notificationChannels)try{c=JSON.parse(u[0].notificationChannels)}catch(e){console.warn("Failed to parse notificationChannels:",e)}let f={...u[0],channels:c};t.status(200).json({config:f})}catch(i){console.warn("Database not available, using mock response:",i);let n={id:r,...e.body,userId:a,updatedAt:new Date().toISOString()};t.status(200).json({config:n})}}async function h(e,t,a){let{id:r}=e.query;if(!r||"string"!=typeof r)return t.status(400).json({error:"Config ID is required"});try{let e=await o.db.select().from(s.alertConfigurations).where((0,l.and)((0,l.eq)(s.alertConfigurations.id,r),(0,l.eq)(s.alertConfigurations.userId,a))).limit(1);if(0===e.length)return t.status(404).json({error:"Alert configuration not found"});await o.db.delete(s.alertConfigurations).where((0,l.eq)(s.alertConfigurations.id,r)),t.status(200).json({message:"Alert configuration deleted successfully"})}catch(e){console.warn("Database not available, using mock response:",e),t.status(200).json({message:"Alert configuration deleted successfully"})}}r()}catch(e){r(e)}})},7153:(e,t)=>{var a;Object.defineProperty(t,"x",{enumerable:!0,get:function(){return a}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(a||(a={}))},1802:(e,t,a)=>{e.exports=a(145)}};var t=require("../../../webpack-api-runtime.js");t.C(e);var a=t(t.s=1984);module.exports=a})();