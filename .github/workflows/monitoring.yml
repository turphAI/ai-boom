name: Application Monitoring

on:
  schedule:
    # Run every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  health-check:
    name: Application Health Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install requests python-dotenv
        
    - name: Check Vercel deployment health
      run: |
        python scripts/vercel_health_check.py
      env:
        DASHBOARD_URL: https://ai-boom-iota.vercel.app
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        
    - name: Check database connectivity
      run: |
        python scripts/db_health_check.py
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        
    # Slack notification disabled - SLACK_WEBHOOK_URL secret not configured
    # - name: Notify on failure
    #   if: failure()
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: failure
    #     text: 'ðŸš¨ Application health check failed! Please investigate.'
    #   env:
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # AWS Cost Monitoring disabled - AWS credentials not configured
  # cost-monitoring:
  #   name: AWS Cost Monitoring
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     
  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.9'
  #       
  #   - name: Install dependencies
  #     run: |
  #       pip install boto3 python-dotenv
  #       
  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v4
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
  #       aws-region: us-east-1
  #       
  #   - name: Check AWS costs
  #     run: |
  #       python scripts/cost_monitor.py
  #     env:
  #       COST_THRESHOLD: 100  # Alert if monthly cost exceeds $100